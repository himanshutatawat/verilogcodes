module alu(input [3:0]a, input[3:0]b, input[3:0]c, output reg[3:0]f,output reg[1:0]d, output reg co,
output reg [6:0]y, output reg [3:0]x
    );
always @(a,b,c)
begin
case(c)
4'b0000:{co,f} = 5'b00000+a;
4'b0001:{co,f} = 5'b00000-a;
4'b0010:{co,f} = 5'b00000+a +b;
4'b0011:{co,f} = 5'b00000+a -b;
4'b0100:{co,f} = 5'b00000+2*a;
4'b0101:{co,f} = 5'b00000+a/2;
4'b0110:{co,f} = 5'b00000+a+1;
4'b0111:{co,f} = 5'b00000+a-4'b0001;
4'b1000:{co,f} = 5'b00000+ -a;
4'b1001:{co,f} = 5'b00000+a&b;
4'b1010:{co,f} = 5'b00000+a|b;
4'b1011:{co,f} = 5'b00000+a^b;
4'b1100:{co,f} = 5'b00000+a<<1;
4'b1101:{co,f} = 5'b00000+a>>1;
4'b1110:{co,f} = 5'b00000+a;
4'b1111:{co,f} = 5'b00000+4'b1111;
default : f=4'b0000;
endcase
end

always @(*)
begin
if(co==1) d[1] =1;
else d[1] = 0;
if (f==0) d[0] = 0;
else d[0] =1;
end

always @(f)
begin
x=4'b1110;
case(f)
5'b00000:y=7'b0000001;
5'b00001:y=7'b1001111;
5'b00010:y=7'b0010010;
5'b00011:y=7'b0000110;
5'b00100:y=7'b1001100;
5'b00101:y=7'b0100100;
5'b00110:y=7'b0100000;
5'b00111:y=7'b0001111;
5'b01000:y=7'b0000000;
5'b01001:y=7'b0000100;
5'b01010:y=7'b0001000;
5'b01011:y=7'b1100000;
5'b01100:y=7'b0110001;
5'b01101:y=7'b1000010;
5'b01110:y=7'b0110000;
5'b01111:y=7'b1111111;
endcase
end 
endmodule
